/**
 * ü§ñ AI Agent - Self-Made Intelligent Chatbot
 * T√≠ch h·ª£p t·∫•t c·∫£ components ƒë·ªÉ t·∫°o th√†nh m·ªôt AI agent ho√†n ch·ªânh
 */

// Import all components (trong m√¥i tr∆∞·ªùng Node.js)
const { NeuralNetwork } = require('./core/brain.js');
const { TextProcessor, LanguageModel } = require('./core/nlp.js');
const { Memory, ReasoningEngine } = require('./core/memory.js');

class AIAgent {
    constructor(config = {}) {
        this.name = config.name || 'AI Assistant';
        this.personality = config.personality || 'helpful and friendly';
        this.language = config.language || 'vi';
        
        console.log(`ü§ñ Kh·ªüi t·∫°o AI Agent: ${this.name}`);
        
        // Initialize components
        this.initializeComponents(config);
        
        // Training data
        this.trainingData = [];
        this.conversationHistory = [];
        
        // State
        this.isLearning = config.learning !== false;
        this.isTraining = false;
        this.responseLatency = [];
        
        console.log('‚úÖ AI Agent ƒë√£ s·∫µn s√†ng!');
    }

    // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
    initializeComponents(config) {
        // Memory system
        this.memory = new Memory({
            shortTermCapacity: config.shortTermCapacity || 15,
            longTermCapacity: config.longTermCapacity || 2000,
            episodicCapacity: config.episodicCapacity || 1000
        });

        // NLP processor
        this.nlp = new TextProcessor();
        
        // Language model
        this.languageModel = new LanguageModel(this.nlp);
        
        // Reasoning engine
        this.reasoning = new ReasoningEngine(this.memory);
        
        // Neural network for response generation
        this.brain = new NeuralNetwork({
            layers: [100, 64, 32, 20], // Input, hidden layers, output
            activations: ['relu', 'relu', 'relu', 'sigmoid'],
            learningRate: 0.001
        });

        // Load initial knowledge
        this.loadInitialKnowledge();
    }

    // Load ki·∫øn th·ª©c ban ƒë·∫ßu
    loadInitialKnowledge() {
        const basicKnowledge = [
            "T√¥i l√† m·ªôt AI agent th√¥ng minh ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ gi√∫p ƒë·ª° con ng∆∞·ªùi.",
            "T√¥i c√≥ th·ªÉ h·ªçc h·ªèi t·ª´ cu·ªôc tr√≤ chuy·ªán v√† c·∫£i thi·ªán theo th·ªùi gian.",
            "Vi·ªát Nam l√† m·ªôt ƒë·∫•t n∆∞·ªõc xinh ƒë·∫πp ·ªü ƒê√¥ng Nam √Å.",
            "AI l√† tr√≠ tu·ªá nh√¢n t·∫°o, gi√∫p m√°y t√≠nh m√¥ ph·ªèng tr√≠ th√¥ng minh con ng∆∞·ªùi.",
            "JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn cho web development.",
            "Machine learning l√† m·ªôt ph·∫ßn c·ªßa AI gi√∫p m√°y t√≠nh h·ªçc t·ª´ d·ªØ li·ªáu.",
            "Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu trong AI v√† data science."
        ];

        basicKnowledge.forEach(knowledge => {
            this.memory.addToLongTerm(`knowledge_${Date.now()}_${Math.random()}`, knowledge, 0.8);
        });

        // Build vocabulary from basic knowledge
        this.nlp.buildVocabulary(basicKnowledge);
        
        // Build language model
        this.languageModel.buildModel(basicKnowledge);

        console.log('üìö ƒê√£ load ki·∫øn th·ª©c c∆° b·∫£n');
    }

    // X·ª≠ l√Ω tin nh·∫Øn ƒë·∫ßu v√†o
    async processMessage(message, userContext = {}) {
        const startTime = Date.now();
        
        console.log(`üë§ User: ${message}`);
        
        try {
            // 1. Preprocess input
            const processedInput = this.nlp.preprocess(message, {
                lowercase: true,
                removeStopwords: false,
                detectLanguage: true,
                extractEntities: true,
                analyzeSentiment: true,
                classifyIntent: true,
                extractKeywords: true
            });

            console.log(`üîç Processed: ${JSON.stringify(processedInput.intent)}`);

            // 2. Add to memory
            this.memory.addToShortTerm({
                type: 'user_message',
                content: message,
                processed: processedInput,
                context: userContext,
                timestamp: Date.now()
            });

            // 3. Reasoning
            const reasoning = this.reasoning.reason(message);
            console.log(`ü§î Reasoning confidence: ${reasoning.confidence.toFixed(2)}`);

            // 4. Generate response
            const response = await this.generateResponse(processedInput, reasoning);

            // 5. Add response to memory
            this.memory.addToShortTerm({
                type: 'ai_response', 
                content: response.content,
                confidence: response.confidence,
                timestamp: Date.now()
            });

            // 6. Learn from interaction
            if (this.isLearning) {
                this.learnFromInteraction(message, response.content, processedInput);
            }

            // 7. Update conversation history
            this.conversationHistory.push({
                user: message,
                ai: response.content,
                timestamp: Date.now(),
                processing: processedInput,
                reasoning: reasoning
            });

            const endTime = Date.now();
            const latency = endTime - startTime;
            this.responseLatency.push(latency);

            console.log(`ü§ñ AI: ${response.content} (${latency}ms)`);

            return {
                content: response.content,
                confidence: response.confidence,
                sentiment: processedInput.sentiment,
                intent: processedInput.intent,
                entities: processedInput.entities,
                keywords: processedInput.keywords,
                reasoning: reasoning.conclusions,
                processingTime: latency
            };

        } catch (error) {
            console.error('‚ùå Error processing message:', error);
            return {
                content: "Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?",
                confidence: 0.5,
                error: true,
                processingTime: Date.now() - startTime
            };
        }
    }

    // Generate response
    async generateResponse(processedInput, reasoning) {
        let response = '';
        let confidence = 0.5;

        // 1. Intent-based responses
        if (processedInput.intent?.intent) {
            const intentResponse = this.generateIntentResponse(processedInput.intent.intent, processedInput);
            if (intentResponse) {
                response = intentResponse.content;
                confidence = intentResponse.confidence;
            }
        }

        // 2. Use reasoning conclusions
        if (!response && reasoning.conclusions.length > 0) {
            response = reasoning.conclusions[0];
            confidence = reasoning.confidence;
        }

        // 3. Memory-based response
        if (!response) {
            const memoryResults = this.memory.recall(processedInput.originalText);
            if (memoryResults.length > 0) {
                response = this.generateContextualResponse(memoryResults[0].content, processedInput);
                confidence = memoryResults[0].relevance;
            }
        }

        // 4. Pattern-based response
        if (!response) {
            response = this.generatePatternResponse(processedInput.originalText);
            confidence = 0.6;
        }

        // 5. Language model generation
        if (!response) {
            response = this.languageModel.generateText(processedInput.originalText, 20);
            confidence = 0.4;
        }

        // 6. Fallback response
        if (!response || response.trim().length === 0) {
            response = this.generateFallbackResponse(processedInput);
            confidence = 0.3;
        }

        // Personality adjustment
        response = this.applyPersonality(response);

        return {
            content: response.trim(),
            confidence: Math.max(0.1, Math.min(1.0, confidence))
        };
    }

    // Generate intent-based response
    generateIntentResponse(intent, processedInput) {
        const intentResponses = {
            greeting: {
                responses: [
                    "Xin ch√†o! T√¥i l√† AI assistant. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
                    "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. H√¥m nay b·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
                    "Hi! T√¥i s·∫µn s√†ng tr√≤ chuy·ªán v·ªõi b·∫°n v·ªÅ b·∫•t c·ª© ƒëi·ªÅu g√¨."
                ],
                confidence: 0.9
            },
            question: {
                responses: [
                    "ƒê√≥ l√† m·ªôt c√¢u h·ªèi hay! ƒê·ªÉ t√¥i suy nghƒ©...",
                    "T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ ƒëi·ªÅu n√†y. D·ª±a v√†o ki·∫øn th·ª©c c·ªßa t√¥i...",
                    "Theo nh∆∞ t√¥i bi·∫øt..."
                ],
                confidence: 0.7
            },
            request: {
                responses: [
                    "T√¥i s·∫Ω c·ªë g·∫Øng gi√∫p b·∫°n.",
                    "ƒê·ªÉ t√¥i xem t√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨...",
                    "T√¥i s·∫Ω l√†m h·∫øt s·ª©c ƒë·ªÉ gi√∫p b·∫°n."
                ],
                confidence: 0.8
            },
            goodbye: {
                responses: [
                    "T·∫°m bi·ªát! R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n.",
                    "Bye bye! H·∫πn g·∫∑p l·∫°i b·∫°n.",
                    "Ch√†o t·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh."
                ],
                confidence: 0.9
            },
            compliment: {
                responses: [
                    "C·∫£m ∆°n b·∫°n! T√¥i r·∫•t vui khi ƒë∆∞·ª£c khen.",
                    "Thank you! T√¥i s·∫Ω c·ªë g·∫Øng l√†m t·ªët h∆°n.",
                    "C·∫£m ∆°n l·ªùi khen! ƒêi·ªÅu ƒë√≥ ƒë·ªông vi√™n t√¥i r·∫•t nhi·ªÅu."
                ],
                confidence: 0.85
            }
        };

        const intentData = intentResponses[intent];
        if (intentData) {
            const randomResponse = intentData.responses[Math.floor(Math.random() * intentData.responses.length)];
            return {
                content: randomResponse,
                confidence: intentData.confidence
            };
        }

        return null;
    }

    // Generate contextual response
    generateContextualResponse(context, processedInput) {
        // Analyze context and generate appropriate response
        const sentiment = processedInput.sentiment?.sentiment;
        
        if (sentiment === 'positive') {
            return `T√¥i hi·ªÉu! ${context} ƒê√≥ l√† ƒëi·ªÅu t√≠ch c·ª±c.`;
        } else if (sentiment === 'negative') {
            return `T√¥i th·∫•y b·∫°n c√≥ v·∫ª kh√¥ng vui v·ªÅ ƒëi·ªÅu n√†y. ${context} T√¥i c√≥ th·ªÉ gi√∫p g√¨ kh√¥ng?`;
        } else {
            return `V·ªÅ v·∫•n ƒë·ªÅ n√†y, ${context}`;
        }
    }

    // Generate pattern-based response
    generatePatternResponse(input) {
        const patterns = [
            {
                pattern: /t√™n (c·ªßa )?b·∫°n l√† g√¨|b·∫°n t√™n g√¨/i,
                response: `T√¥i l√† ${this.name}, m·ªôt AI assistant th√¥ng minh. R·∫•t vui ƒë∆∞·ª£c l√†m quen v·ªõi b·∫°n!`
            },
            {
                pattern: /b·∫°n c√≥ th·ªÉ l√†m g√¨|kh·∫£ nƒÉng c·ªßa b·∫°n/i,
                response: "T√¥i c√≥ th·ªÉ tr√≤ chuy·ªán, tr·∫£ l·ªùi c√¢u h·ªèi, gi·∫£i to√°n, ph√¢n t√≠ch th√¥ng tin v√† h·ªçc h·ªèi t·ª´ cu·ªôc tr√≤ chuy·ªán v·ªõi b·∫°n."
            },
            {
                pattern: /(\d+)\s*[\+\-\*\/]\s*(\d+)/,
                response: (match) => {
                    try {
                        const result = eval(match[0]);
                        return `K·∫øt qu·∫£ l√†: ${result}`;
                    } catch (e) {
                        return "T√¥i kh√¥ng th·ªÉ t√≠nh to√°n ƒë∆∞·ª£c ph√©p t√≠nh n√†y.";
                    }
                }
            },
            {
                pattern: /m·∫•y gi·ªù|th·ªùi gian|time/i,
                response: `Hi·ªán t·∫°i l√†: ${new Date().toLocaleString('vi-VN')}`
            },
            {
                pattern: /c·∫£m ∆°n|thanks|thank you/i,
                response: "Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n."
            }
        ];

        for (const { pattern, response } of patterns) {
            const match = input.match(pattern);
            if (match) {
                if (typeof response === 'function') {
                    return response(match);
                }
                return response;
            }
        }

        return null;
    }

    // Apply personality to response
    applyPersonality(response) {
        const personalityTraits = {
            'helpful and friendly': {
                prefixes: ['', 'T√¥i nghƒ© r·∫±ng ', 'Theo √Ω ki·∫øn c·ªßa t√¥i, '],
                suffixes: ['', ' B·∫°n c√≥ c·∫ßn th√™m th√¥ng tin g√¨ kh√¥ng?', ' Hy v·ªçng ƒëi·ªÅu n√†y h·ªØu √≠ch!'],
                tone: 'warm'
            },
            'professional': {
                prefixes: ['D·ª±a tr√™n ph√¢n t√≠ch, ', 'K·∫øt qu·∫£ cho th·∫•y ', ''],
                suffixes: ['', ' ƒê√¢y l√† c√¢u tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t t√¥i c√≥ th·ªÉ ƒë∆∞a ra.'],
                tone: 'formal'
            },
            'casual': {
                prefixes: ['', 'M√¨nh nghƒ© ', 'Theo m√¨nh th√¨ '],
                suffixes: ['', ' B·∫°n th·∫•y sao?', ' C√≥ ƒë√∫ng kh√¥ng?'],
                tone: 'informal'
            }
        };

        const trait = personalityTraits[this.personality] || personalityTraits['helpful and friendly'];
        
        const prefix = trait.prefixes[Math.floor(Math.random() * trait.prefixes.length)];
        const suffix = trait.suffixes[Math.floor(Math.random() * trait.suffixes.length)];
        
        return prefix + response + suffix;
    }

    // Learn from interaction
    learnFromInteraction(userMessage, aiResponse, processedInput) {
        // Store successful patterns
        if (processedInput.sentiment?.sentiment === 'positive') {
            this.memory.addToLongTerm(
                `successful_pattern_${Date.now()}`,
                `User said: "${userMessage}" -> AI responded: "${aiResponse}" -> Positive feedback`,
                0.7
            );
        }

        // Learn new vocabulary
        if (processedInput.keywords && processedInput.keywords.length > 0) {
            processedInput.keywords.forEach(keyword => {
                this.nlp.vocabulary.set(keyword.word, this.nlp.vocabulary.size);
                const frequency = this.nlp.wordFrequency.get(keyword.word) || 0;
                this.nlp.wordFrequency.set(keyword.word, frequency + 1);
            });
        }

        // Add to episodic memory
        this.memory.addEpisodicMemory({
            type: 'conversation',
            userMessage,
            aiResponse,
            context: processedInput,
            outcome: 'completed'
        });

        // Update reasoning rules if applicable
        if (processedInput.intent?.confidence > 0.8) {
            this.reasoning.addRule(`learned_${Date.now()}`, {
                pattern: [userMessage],
                conclusion: aiResponse,
                confidence: processedInput.intent.confidence * 0.6
            });
        }
    }

    // Train the neural network
    async trainNetwork(trainingData = null) {
        if (this.isTraining) {
            console.log('‚ö†Ô∏è Training already in progress');
            return;
        }

        this.isTraining = true;
        console.log('üéì B·∫Øt ƒë·∫ßu training neural network...');

        try {
            const data = trainingData || this.prepareTrainingData();
            
            if (data.inputs.length === 0) {
                console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu training');
                return;
            }

            await this.brain.train(data.inputs, data.outputs, 500);
            
            // Evaluate performance
            const evaluation = this.brain.evaluate(data.inputs.slice(-10), data.outputs.slice(-10));
            console.log(`üìä Training completed - Accuracy: ${evaluation.accuracy.toFixed(1)}%`);

        } catch (error) {
            console.error('‚ùå Training error:', error);
        } finally {
            this.isTraining = false;
        }
    }

    // Prepare training data from conversation history
    prepareTrainingData() {
        const inputs = [];
        const outputs = [];

        this.conversationHistory.forEach(conversation => {
            // Convert text to vectors
            const inputVector = this.nlp.textToVector(conversation.user, 100);
            const outputVector = this.nlp.textToVector(conversation.ai, 20);

            if (inputVector.length > 0 && outputVector.length > 0) {
                inputs.push(inputVector);
                outputs.push(outputVector);
            }
        });

        return { inputs, outputs };
    }

    // Save AI Agent state
    save() {
        const agentState = {
            config: {
                name: this.name,
                personality: this.personality,
                language: this.language
            },
            memory: this.memory.save(),
            nlp: this.nlp.save(),
            reasoning: this.reasoning.save(),
            brain: this.brain.save(),
            conversationHistory: this.conversationHistory.slice(-100), // Last 100 conversations
            trainingData: this.trainingData,
            stats: this.getStats(),
            timestamp: Date.now(),
            version: '1.0.0'
        };

        return JSON.stringify(agentState, null, 2);
    }

    // Load AI Agent state
    load(agentStateData) {
        try {
            const state = typeof agentStateData === 'string' ? 
                JSON.parse(agentStateData) : agentStateData;

            // Load config
            if (state.config) {
                this.name = state.config.name || this.name;
                this.personality = state.config.personality || this.personality;
                this.language = state.config.language || this.language;
            }

            // Load components
            if (state.memory) this.memory.load(state.memory);
            if (state.nlp) this.nlp.load(state.nlp);
            if (state.reasoning) this.reasoning.load(state.reasoning);
            if (state.brain) this.brain.load(state.brain);

            // Load conversation history
            this.conversationHistory = state.conversationHistory || [];
            this.trainingData = state.trainingData || [];

            console.log('‚úÖ AI Agent loaded successfully!');
            console.log(`üìä Loaded ${this.conversationHistory.length} conversations`);
            
        } catch (error) {
            console.error('‚ùå Error loading AI Agent state:', error);
        }
    }

    // Get statistics
    getStats() {
        return {
            agent: {
                name: this.name,
                personality: this.personality,
                uptime: Date.now(),
                totalConversations: this.conversationHistory.length,
                isLearning: this.isLearning,
                isTraining: this.isTraining
            },
            performance: {
                averageResponseTime: this.responseLatency.length > 0 ? 
                    (this.responseLatency.reduce((a, b) => a + b, 0) / this.responseLatency.length).toFixed(2) + 'ms' : '0ms',
                totalResponses: this.responseLatency.length,
                fastestResponse: Math.min(...this.responseLatency) + 'ms',
                slowestResponse: Math.max(...this.responseLatency) + 'ms'
            },
            memory: this.memory.getStats(),
            reasoning: this.reasoning.getStats(),
            nlp: {
                vocabularySize: this.nlp.vocabulary.size,
                totalWords: this.nlp.wordFrequency.size,
                bigramsCount: this.nlp.bigramFrequency.size
            },
            neural: {
                layers: this.brain.config.layers,
                trainingHistory: this.brain.trainingHistory.length,
                lastTraining: this.brain.trainingHistory.length > 0 ? 
                    new Date(this.brain.trainingHistory[this.brain.trainingHistory.length - 1].timestamp).toLocaleString() : 'Never'
            }
        };
    }

    // Reset AI Agent
    reset() {
        console.log('üîÑ Resetting AI Agent...');
        
        this.conversationHistory = [];
        this.trainingData = [];
        this.responseLatency = [];
        
        this.memory = new Memory();
        this.reasoning = new ReasoningEngine(this.memory);
        
        this.loadInitialKnowledge();
        
        console.log('‚úÖ AI Agent reset completed');
    }

    // Set personality
    setPersonality(personality) {
        const validPersonalities = ['helpful and friendly', 'professional', 'casual'];
        
        if (validPersonalities.includes(personality)) {
            this.personality = personality;
            console.log(`üé≠ Personality changed to: ${personality}`);
        } else {
            console.log(`‚ùå Invalid personality. Valid options: ${validPersonalities.join(', ')}`);
        }
    }

    // Enable/disable learning
    toggleLearning() {
        this.isLearning = !this.isLearning;
        console.log(`üß† Learning ${this.isLearning ? 'enabled' : 'disabled'}`);
        return this.isLearning;
    }

    // Get conversation history
    getConversationHistory(limit = 10) {
        return this.conversationHistory.slice(-limit);
    }

    // Search conversations
    searchConversations(query) {
        return this.conversationHistory.filter(conv => 
            conv.user.toLowerCase().includes(query.toLowerCase()) ||
            conv.ai.toLowerCase().includes(query.toLowerCase())
        );
    }

    // Export conversations
    exportConversations(format = 'json') {
        if (format === 'json') {
            return JSON.stringify(this.conversationHistory, null, 2);
        } else if (format === 'txt') {
            return this.conversationHistory.map(conv => 
                `[${new Date(conv.timestamp).toLocaleString()}]\nUser: ${conv.user}\nAI: ${conv.ai}\n\n`
            ).join('');
        }
        
        return null;
    }

    // Health check
    healthCheck() {
        const health = {
            status: 'healthy',
            components: {
                memory: this.memory ? 'ok' : 'error',
                nlp: this.nlp ? 'ok' : 'error',
                reasoning: this.reasoning ? 'ok' : 'error',
                brain: this.brain ? 'ok' : 'error'
            },
            uptime: Date.now(),
            timestamp: new Date().toISOString()
        };

        const hasErrors = Object.values(health.components).includes('error');
        if (hasErrors) {
            health.status = 'unhealthy';
        }

        return health;
    }
}

// Chat Interface cho browser
class ChatInterface {
    constructor(aiAgent) {
        this.ai = aiAgent;
        this.isTyping = false;
        this.initializeInterface();
    }

    initializeInterface() {
        // Create chat interface elements
        const chatContainer = document.getElementById('chat-container');
        if (!chatContainer) {
            console.error('Chat container not found');
            return;
        }

        this.addWelcomeMessage();
        this.setupEventListeners();
    }

    addWelcomeMessage() {
        this.addMessage(
            `Xin ch√†o! T√¥i l√† ${this.ai.name}. T√¥i c√≥ th·ªÉ h·ªçc h·ªèi v√† tr√≤ chuy·ªán v·ªõi b·∫°n v·ªÅ nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c nhau. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!`,
            false
        );
    }

    setupEventListeners() {
        const input = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');

        if (input && sendButton) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            sendButton.addEventListener('click', () => this.sendMessage());
        }
    }

    async sendMessage() {
        const input = document.getElementById('message-input');
        const message = input.value.trim();

        if (!message || this.isTyping) return;

        // Add user message
        this.addMessage(message, true);
        input.value = '';

        // Show typing indicator
        this.showTyping();

        try {
            // Get AI response
            const response = await this.ai.processMessage(message);
            
            // Hide typing and add AI response
            this.hideTyping();
            this.addMessage(response.content, false, {
                confidence: response.confidence,
                processingTime: response.processingTime,
                intent: response.intent?.intent,
                sentiment: response.sentiment?.sentiment
            });

        } catch (error) {
            this.hideTyping();
            this.addMessage('Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i.', false);
            console.error('Chat error:', error);
        }
    }

    addMessage(content, isUser, metadata = {}) {
        const messagesContainer = document.getElementById('messages');
        if (!messagesContainer) return;

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isUser ? 'user' : 'ai'}`;
        
        const timestamp = new Date().toLocaleTimeString();
        let metadataInfo = '';
        
        if (!isUser && metadata.confidence) {
            metadataInfo = `<small class="metadata">Confidence: ${(metadata.confidence * 100).toFixed(0)}% | ${metadata.processingTime}ms</small>`;
        }

        messageDiv.innerHTML = `
            <div class="message-content">${content}</div>
            <div class="message-time">${timestamp}</div>
            ${metadataInfo}
        `;

        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    showTyping() {
        this.isTyping = true;
        const messagesContainer = document.getElementById('messages');
        
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message ai typing-indicator';
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = `
            <div class="message-content">
                <span class="typing-dots">
                    <span></span><span></span><span></span>
                </span>
                ƒêang suy nghƒ©...
            </div>
        `;

        messagesContainer.appendChild(typingDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    hideTyping() {
        this.isTyping = false;
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
}

// Main initialization
async function initializeAI() {
    console.log('üöÄ Initializing AI Agent...');
    
    // Create AI Agent
    const agent = new AIAgent({
        name: 'AI Assistant',
        personality: 'helpful and friendly',
        language: 'vi',
        shortTermCapacity: 15,
        longTermCapacity: 2000,
        learning: true
    });

    // Create chat interface if in browser
    if (typeof window !== 'undefined') {
        window.aiAgent = agent;
        window.chatInterface = new ChatInterface(agent);
        
        // Expose useful functions globally
        window.saveAI = () => agent.save();
        window.loadAI = (data) => agent.load(data);
        window.getStats = () => agent.getStats();
        window.trainAI = () => agent.trainNetwork();
    }

    return agent;
}

// Export for Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        AIAgent,
        ChatInterface,
        initializeAI
    };
}

// Auto-initialize if in browser
if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', initializeAI);
}